{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rayaa\\\\ReactProjects\\\\forexpress\\\\forexpressFE\\\\Home\\\\src\\\\ChartMaker.js\",\n  _s = $RefreshSig$();\nimport NewChart from './NewChart.js';\nimport fetchData from './App.js';\nimport React from 'react';\nimport './ChartMaker.css';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChartMaker({\n  time,\n  cur1,\n  cur2\n}) {\n  _s();\n  const [pot, setPot] = useState();\n  const [label, setLabel] = useState([1, 2, 3, 4, 5]);\n  const [data, setData] = useState([2, 4, 6, 8, 10]);\n  const [lineColor, setLineColor] = useState('rgba(0, 0, 255, 1)');\n  const fetchHistory = async () => {\n    const url = `http://localhost:3002/api/getData/${time}/${cur1}/${cur2}`;\n    console.log(url);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    var oldData = await response.json();\n    console.log(oldData);\n    var hist = await oldData.data;\n    hist = await JSON.parse(hist);\n    console.log(\"FINAL DATA : \" + hist);\n    if (Array.isArray(hist)) {\n      console.log(\"YAY!\");\n    } else {\n      console.log(\"NO :(\");\n    }\n    var labels = [];\n    var newData = [];\n    for (var i = 0; i < hist.length; i++) {\n      labels.push(i);\n      newData.push(hist[i].price);\n      console.log(\"ENTRY : \" + i);\n      console.log(\"DATA : \" + hist[i].price);\n    }\n    console.log(labels);\n    console.log(newData);\n    await setLabel(labels);\n    await setData(newData);\n    if (newData[0] <= newData[newData.length - 1]) {\n      setLineColor('rgba(0,255,0,1)');\n    } else {\n      setLineColor('rgba(255,0,0,1)');\n    }\n    console.log(\"test:\" + labels + \" \" + newData);\n  };\n  useEffect(() => {\n    fetchHistory();\n  }, [time, cur1, cur2]);\n  useEffect(() => {\n    setChartData({\n      labels: label,\n      datasets: [{\n        label: 'My First dataset',\n        backgroundColor: 'rgba(30, 30, 30 0.8)',\n        borderColor: lineColor,\n        borderWidth: 2,\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n        data: data\n      }]\n    });\n  }, [data, label, time, cur1, cur2]);\n  const [chartData, setChartData] = useState({\n    labels: label,\n    datasets: [{\n      label: 'My First dataset',\n      backgroundColor: 'rgba(30, 30, 30 0.8)',\n      borderColor: 'rgba(0,255,0,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(255,0,0,0.4)',\n      hoverBorderColor: 'rgba(255,99,132,1)',\n      data: data\n    }]\n  });\n  const [chartOptions, setChartOptions] = useState({\n    responsive: false,\n    maintainAspectRatio: false\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chartContainer\",\n    children: [/*#__PURE__*/_jsxDEV(NewChart, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chartMeta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n/*\r\n                <p>High : {high}</p>\r\n                <p>Low : {low}</p>\r\n                */\n_s(ChartMaker, \"S1pkj22g563lewQmUhBKGi6abmw=\");\n_c = ChartMaker;\nvar _c;\n$RefreshReg$(_c, \"ChartMaker\");","map":{"version":3,"names":["NewChart","fetchData","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChartMaker","time","cur1","cur2","_s","pot","setPot","label","setLabel","data","setData","lineColor","setLineColor","fetchHistory","url","console","log","response","fetch","ok","Error","oldData","json","hist","JSON","parse","Array","isArray","labels","newData","i","length","push","price","setChartData","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","chartData","chartOptions","setChartOptions","responsive","maintainAspectRatio","id","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rayaa/ReactProjects/forexpress/forexpressFE/Home/src/ChartMaker.js"],"sourcesContent":["import NewChart from './NewChart.js';\r\nimport fetchData from './App.js';\r\nimport React from 'react';\r\nimport './ChartMaker.css'\r\nimport {useState, useEffect, useRef} from 'react';\r\n\r\nexport default function ChartMaker({time, cur1, cur2}){\r\n    const [pot, setPot] = useState();\r\n    const [label, setLabel] = useState([1, 2, 3, 4, 5]);\r\n    const [data, setData] = useState([2, 4, 6, 8, 10]);\r\n    const [lineColor, setLineColor] = useState('rgba(0, 0, 255, 1)');\r\n\r\n    const fetchHistory = async () => {\r\n        const url = `http://localhost:3002/api/getData/${time}/${cur1}/${cur2}`;\r\n        console.log(url);\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        var oldData = await response.json();\r\n        console.log(oldData);\r\n        var hist = await oldData.data;\r\n        hist = await JSON.parse(hist);\r\n        console.log(\"FINAL DATA : \" + hist);\r\n        if(Array.isArray(hist)){\r\n          console.log(\"YAY!\");\r\n        }\r\n        else{\r\n          console.log(\"NO :(\");\r\n        }\r\n        var labels = [];\r\n        var newData = [];\r\n        for(var i = 0; i < hist.length; i++){\r\n            labels.push(i);\r\n            newData.push(hist[i].price);\r\n            console.log(\"ENTRY : \" + i);\r\n            console.log(\"DATA : \" + hist[i].price)\r\n        }\r\n        console.log(labels);\r\n        console.log(newData);\r\n        await setLabel(labels);\r\n        await setData(newData);\r\n\r\n        if(newData[0] <= newData[newData.length - 1]){\r\n            setLineColor('rgba(0,255,0,1)')\r\n        }\r\n        else{\r\n            setLineColor('rgba(255,0,0,1)')\r\n        }\r\n\r\n        console.log(\"test:\" + labels + \" \" + newData);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchHistory();\r\n    }, [time, cur1, cur2]);\r\n\r\n    useEffect(() => {\r\n        setChartData({\r\n            labels: label,\r\n            datasets: [\r\n                {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(30, 30, 30 0.8)',\r\n                    borderColor: lineColor,\r\n                    borderWidth: 2,\r\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                    hoverBorderColor: 'rgba(255,99,132,1)',\r\n                    data: data,\r\n                },\r\n            ],\r\n        });\r\n    }, [data, label, time, cur1, cur2]);\r\n\r\n    const [chartData, setChartData] = useState({\r\n        labels: label,\r\n        datasets: [\r\n          {\r\n            label: 'My First dataset',\r\n            backgroundColor: 'rgba(30, 30, 30 0.8)',\r\n            borderColor: 'rgba(0,255,0,1)',\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: 'rgba(255,0,0,0.4)',\r\n            hoverBorderColor: 'rgba(255,99,132,1)',\r\n            data: data,\r\n          },\r\n        ],\r\n      });\r\n    \r\n      const [chartOptions, setChartOptions] = useState({\r\n        responsive: false,\r\n        maintainAspectRatio: false,\r\n      });\r\n    \r\n    return (\r\n        <div id=\"chartContainer\">\r\n            <NewChart data={chartData} options={chartOptions} />\r\n            <div id=\"chartMeta\">\r\n            \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/*\r\n                <p>High : {high}</p>\r\n                <p>Low : {low}</p>\r\n                */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}