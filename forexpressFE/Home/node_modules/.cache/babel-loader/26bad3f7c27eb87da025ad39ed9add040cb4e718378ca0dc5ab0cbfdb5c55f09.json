{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rayaa\\\\ReactProjects\\\\forexpress\\\\forexpressFE\\\\Home\\\\src\\\\ChartMaker.js\",\n  _s = $RefreshSig$();\nimport NewChart from './NewChart.js';\nimport fetchData from './App.js';\nimport React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChartMaker() {\n  _s();\n  const [label, setLabel] = useState();\n  const [data, setData] = useState();\n  useEffect(() => {\n    const fetchHistory = async () => {\n      const url = `http://localhost:3002/api/getData/${type}/${cur1}/${cur2}`;\n      console.log(url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      var data = await response.json();\n      var hist = await data.history;\n      var bal = await data.balance;\n      hist = await JSON.parse(hist);\n      bal = await JSON.parse(bal);\n      console.log(\"FINAL DATA : \" + hist + \"  ::  \" + bal + \"  ::  \" + bal.length);\n      if (Array.isArray(hist)) {\n        console.log(\"YAY!\");\n      } else {\n        console.log(\"NO :(\");\n      }\n      if (Array.isArray(bal)) {\n        console.log(\"HAPPY!\");\n      } else {\n        console.log(\"SAD :(\");\n      }\n      await setUserBalance(bal);\n      await setHistory(hist);\n      console.log(\"test:\" + history + \" \" + userBalance);\n    };\n    fetchHistory();\n  }, [label, data]);\n  const [chartData, setChartData] = useState({\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [{\n      label: 'My First dataset',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      borderColor: 'rgba(255,99,132,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n      hoverBorderColor: 'rgba(255,99,132,1)',\n      data: [65, 59, 80, 81, 56, 55, 40]\n    }]\n  });\n  const [chartOptions, setChartOptions] = useState({\n    responsive: false,\n    maintainAspectRatio: false\n  });\n  /*\r\n  const [count, setCount] = useState(0);\r\n    useEffect(() => {\r\n      async function getData(data, cur1, cur2){\r\n            var url = 'http://localhost:3002/api/getData/' + data + '/' + cur1 + '/' + cur2;\r\n          console.log(url);\r\n          const entryData = fetch(url);\r\n          const entries = entryData.length;\r\n      \r\n          var arr = [];\r\n          for(var i = 0; i < entries; i++){\r\n              arr.push(i);\r\n          }\r\n      \r\n          var priceData = [];\r\n          for(var i = 0; i < entryData.length; i++){\r\n              priceData.push(entryData.catch(i).price);\r\n          }\r\n          const dataChart = document.getElementById(\"testGraph\");\r\n          let lineChart = new Chart(dataChart, {\r\n              type : 'line',\r\n              labels : {\r\n                  arr,\r\n                  data: priceData\r\n              },\r\n          });\r\n      }\r\n        getData(\"Day\", \"USD\", \"DKK\");\r\n  }, [count]);\r\n  */\n  return /*#__PURE__*/_jsxDEV(NewChart, {\n    data: chartData,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartMaker, \"Lnpjvjdxu/oRn4ac1lTqClIelEQ=\");\n_c = ChartMaker;\nvar _c;\n$RefreshReg$(_c, \"ChartMaker\");","map":{"version":3,"names":["NewChart","fetchData","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChartMaker","_s","label","setLabel","data","setData","fetchHistory","url","type","cur1","cur2","console","log","response","fetch","ok","Error","json","hist","history","bal","balance","JSON","parse","length","Array","isArray","setUserBalance","setHistory","userBalance","chartData","setChartData","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","chartOptions","setChartOptions","responsive","maintainAspectRatio","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rayaa/ReactProjects/forexpress/forexpressFE/Home/src/ChartMaker.js"],"sourcesContent":["import NewChart from './NewChart.js';\r\nimport fetchData from './App.js';\r\nimport React from 'react';\r\nimport {useState, useEffect, useRef} from 'react';\r\n\r\nexport default function ChartMaker(){\r\n\r\n    const [label, setLabel] = useState();\r\n    const [data, setData] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchHistory = async () => {\r\n            const url = `http://localhost:3002/api/getData/${type}/${cur1}/${cur2}`;\r\n            console.log(url);\r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n              throw new Error('Network response was not ok');\r\n            }\r\n            var data = await response.json();\r\n            var hist = await data.history;\r\n            var bal = await data.balance;\r\n            hist = await JSON.parse(hist);\r\n            bal = await JSON.parse(bal);\r\n            console.log(\"FINAL DATA : \" + hist + \"  ::  \" + bal + \"  ::  \" + bal.length);\r\n            if(Array.isArray(hist)){\r\n              console.log(\"YAY!\");\r\n            }\r\n            else{\r\n              console.log(\"NO :(\");\r\n            }\r\n            if(Array.isArray(bal)){\r\n              console.log(\"HAPPY!\");\r\n            }\r\n            else{\r\n              console.log(\"SAD :(\");\r\n            }\r\n            await setUserBalance(bal);\r\n            await setHistory(hist);\r\n            console.log(\"test:\" + history + \" \" + userBalance);\r\n          };\r\n      \r\n          fetchHistory();\r\n\r\n    }, [label, data]);\r\n\r\n    const [chartData, setChartData] = useState({\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n        datasets: [\r\n          {\r\n            label: 'My First dataset',\r\n            backgroundColor: 'rgba(255,99,132,0.2)',\r\n            borderColor: 'rgba(255,99,132,1)',\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n            hoverBorderColor: 'rgba(255,99,132,1)',\r\n            data: [65, 59, 80, 81, 56, 55, 40],\r\n          },\r\n        ],\r\n      });\r\n    \r\n      const [chartOptions, setChartOptions] = useState({\r\n        responsive: false,\r\n        maintainAspectRatio: false,\r\n      });\r\n    /*\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        async function getData(data, cur1, cur2){\r\n\r\n            var url = 'http://localhost:3002/api/getData/' + data + '/' + cur1 + '/' + cur2;\r\n            console.log(url);\r\n            const entryData = fetch(url);\r\n            const entries = entryData.length;\r\n        \r\n            var arr = [];\r\n            for(var i = 0; i < entries; i++){\r\n                arr.push(i);\r\n            }\r\n        \r\n            var priceData = [];\r\n            for(var i = 0; i < entryData.length; i++){\r\n                priceData.push(entryData.catch(i).price);\r\n            }\r\n            const dataChart = document.getElementById(\"testGraph\");\r\n            let lineChart = new Chart(dataChart, {\r\n                type : 'line',\r\n                labels : {\r\n                    arr,\r\n                    data: priceData\r\n                },\r\n            });\r\n        }\r\n\r\n        getData(\"Day\", \"USD\", \"DKK\");\r\n    }, [count]);\r\n    */\r\n    return (\r\n        <NewChart data={chartData} options={chartOptions} />\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}