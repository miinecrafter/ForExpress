{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rayaa\\\\ReactProjects\\\\forexpress\\\\forexpressFE\\\\Home\\\\src\\\\NewChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './chart.css';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewChart = ({\n  data,\n  options\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    // Check if chart instance exists and destroy it before creating a new one\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n\n    // Create new chart instance\n    const ctx = chartRef.current.getContext('2d');\n    chartInstanceRef.current = new Chart(ctx, {\n      type: 'line',\n      // Specify your chart type\n      data: data,\n      options: options\n    });\n\n    // Cleanup function to destroy the chart instance when the component unmounts\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [data, options]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    id: \"testGraph\",\n    width: \"400px\",\n    height: \"400px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 12\n  }, this);\n};\n_s(NewChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = NewChart;\nexport default NewChart;\nvar _c;\n$RefreshReg$(_c, \"NewChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","NewChart","data","options","_s","chartRef","chartInstanceRef","current","destroy","ctx","getContext","type","ref","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rayaa/ReactProjects/forexpress/forexpressFE/Home/src/NewChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport './chart.css';\r\nimport { Chart } from 'chart.js/auto';\r\n\r\nconst NewChart = ({data, options}) => {\r\n    const chartRef = useRef(null);\r\n    const chartInstanceRef = useRef(null);\r\n    useEffect(() => {\r\n        // Check if chart instance exists and destroy it before creating a new one\r\n        if (chartInstanceRef.current) {\r\n            chartInstanceRef.current.destroy();\r\n        }\r\n        \r\n        // Create new chart instance\r\n        const ctx = chartRef.current.getContext('2d');\r\n        chartInstanceRef.current = new Chart(ctx, {\r\n            type: 'line', // Specify your chart type\r\n            data: data,\r\n            options: options,\r\n        });\r\n        \r\n        // Cleanup function to destroy the chart instance when the component unmounts\r\n        return () => {\r\n            if (chartInstanceRef.current) {\r\n                chartInstanceRef.current.destroy();\r\n            }\r\n        };\r\n    }, [data, options]);\r\n    return <canvas ref={chartRef} id=\"testGraph\" width=\"400px\" height=\"400px\" />;\r\n}\r\n\r\nexport default NewChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,aAAa;AACpB,SAASC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,GAAGA,CAAC;EAACC,IAAI;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMS,gBAAgB,GAAGT,MAAM,CAAC,IAAI,CAAC;EACrCD,SAAS,CAAC,MAAM;IACZ;IACA,IAAIU,gBAAgB,CAACC,OAAO,EAAE;MAC1BD,gBAAgB,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;IACtC;;IAEA;IACA,MAAMC,GAAG,GAAGJ,QAAQ,CAACE,OAAO,CAACG,UAAU,CAAC,IAAI,CAAC;IAC7CJ,gBAAgB,CAACC,OAAO,GAAG,IAAIT,KAAK,CAACW,GAAG,EAAE;MACtCE,IAAI,EAAE,MAAM;MAAE;MACdT,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAEA;IACb,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACT,IAAIG,gBAAgB,CAACC,OAAO,EAAE;QAC1BD,gBAAgB,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;MACtC;IACJ,CAAC;EACL,CAAC,EAAE,CAACN,IAAI,EAAEC,OAAO,CAAC,CAAC;EACnB,oBAAOH,OAAA;IAAQY,GAAG,EAAEP,QAAS;IAACQ,EAAE,EAAC,WAAW;IAACC,KAAK,EAAC,OAAO;IAACC,MAAM,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChF,CAAC;AAAAf,EAAA,CAzBKH,QAAQ;AAAAmB,EAAA,GAARnB,QAAQ;AA2Bd,eAAeA,QAAQ;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}