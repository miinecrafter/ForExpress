{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rayaa\\\\ReactProjects\\\\forexpress\\\\forexpressFE\\\\Home\\\\src\\\\ChartMaker.js\",\n  _s = $RefreshSig$();\nimport NewChart from './NewChart.js';\nimport fetchData from './App.js';\nimport React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChartMaker() {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [{\n      label: 'My First dataset',\n      backgroundColor: 'rgba(255,99,132,0.2)',\n      borderColor: 'rgba(255,99,132,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n      hoverBorderColor: 'rgba(255,99,132,1)',\n      data: [65, 59, 80, 81, 56, 55, 40]\n    }]\n  });\n  const [chartOptions, setChartOptions] = useState({\n    responsive: false,\n    maintainAspectRatio: false\n  });\n  /*\r\n  const [count, setCount] = useState(0);\r\n    useEffect(() => {\r\n      async function getData(data, cur1, cur2){\r\n            var url = 'http://localhost:3002/api/getData/' + data + '/' + cur1 + '/' + cur2;\r\n          console.log(url);\r\n          const entryData = fetch(url);\r\n          const entries = entryData.length;\r\n      \r\n          var arr = [];\r\n          for(var i = 0; i < entries; i++){\r\n              arr.push(i);\r\n          }\r\n      \r\n          var priceData = [];\r\n          for(var i = 0; i < entryData.length; i++){\r\n              priceData.push(entryData.catch(i).price);\r\n          }\r\n          const dataChart = document.getElementById(\"testGraph\");\r\n          let lineChart = new Chart(dataChart, {\r\n              type : 'line',\r\n              labels : {\r\n                  arr,\r\n                  data: priceData\r\n              },\r\n          });\r\n      }\r\n        getData(\"Day\", \"USD\", \"DKK\");\r\n  }, [count]);\r\n  */\n  return /*#__PURE__*/_jsxDEV(NewChart, {\n    data: chartData,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartMaker, \"dLEFPgnGH6HpjF18XLziAEeJPoI=\");\n_c = ChartMaker;\nvar _c;\n$RefreshReg$(_c, \"ChartMaker\");","map":{"version":3,"names":["NewChart","fetchData","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChartMaker","_s","chartData","setChartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","chartOptions","setChartOptions","responsive","maintainAspectRatio","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rayaa/ReactProjects/forexpress/forexpressFE/Home/src/ChartMaker.js"],"sourcesContent":["import NewChart from './NewChart.js';\r\nimport fetchData from './App.js';\r\nimport React from 'react';\r\nimport {useState, useEffect, useRef} from 'react';\r\n\r\nexport default function ChartMaker(){\r\n    const [chartData, setChartData] = useState({\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n        datasets: [\r\n          {\r\n            label: 'My First dataset',\r\n            backgroundColor: 'rgba(255,99,132,0.2)',\r\n            borderColor: 'rgba(255,99,132,1)',\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n            hoverBorderColor: 'rgba(255,99,132,1)',\r\n            data: [65, 59, 80, 81, 56, 55, 40],\r\n          },\r\n        ],\r\n      });\r\n    \r\n      const [chartOptions, setChartOptions] = useState({\r\n        responsive: false,\r\n        maintainAspectRatio: false,\r\n      });\r\n    /*\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        async function getData(data, cur1, cur2){\r\n\r\n            var url = 'http://localhost:3002/api/getData/' + data + '/' + cur1 + '/' + cur2;\r\n            console.log(url);\r\n            const entryData = fetch(url);\r\n            const entries = entryData.length;\r\n        \r\n            var arr = [];\r\n            for(var i = 0; i < entries; i++){\r\n                arr.push(i);\r\n            }\r\n        \r\n            var priceData = [];\r\n            for(var i = 0; i < entryData.length; i++){\r\n                priceData.push(entryData.catch(i).price);\r\n            }\r\n            const dataChart = document.getElementById(\"testGraph\");\r\n            let lineChart = new Chart(dataChart, {\r\n                type : 'line',\r\n                labels : {\r\n                    arr,\r\n                    data: priceData\r\n                },\r\n            });\r\n        }\r\n\r\n        getData(\"Day\", \"USD\", \"DKK\");\r\n    }, [count]);\r\n    */\r\n    return (\r\n        <NewChart data={chartData} options={chartOptions} />\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,OAAOC,SAAS,MAAM,UAAU;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,eAAe,SAASC,UAAUA,CAAA,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC;IACvCS,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;IACxEC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,kBAAkB;MACzBC,eAAe,EAAE,sBAAsB;MACvCC,WAAW,EAAE,oBAAoB;MACjCC,WAAW,EAAE,CAAC;MACdC,oBAAoB,EAAE,sBAAsB;MAC5CC,gBAAgB,EAAE,oBAAoB;MACtCC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACnC,CAAC;EAEL,CAAC,CAAC;EAEF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC;IAC/CoB,UAAU,EAAE,KAAK;IACjBC,mBAAmB,EAAE;EACvB,CAAC,CAAC;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAII,oBACIjB,OAAA,CAACP,QAAQ;IAACoB,IAAI,EAAEV,SAAU;IAACe,OAAO,EAAEJ;EAAa;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE5D;AAACpB,EAAA,CAxDuBD,UAAU;AAAAsB,EAAA,GAAVtB,UAAU;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}