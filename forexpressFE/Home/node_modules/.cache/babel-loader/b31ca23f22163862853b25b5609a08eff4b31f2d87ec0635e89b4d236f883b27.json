{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rayaa\\\\ReactProjects\\\\forexpress\\\\forexpressFE\\\\Home\\\\src\\\\ChartMaker.js\",\n  _s = $RefreshSig$();\nimport NewChart from './NewChart.js';\nimport fetchData from './App.js';\nimport React from 'react';\nimport './ChartMaker.css';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChartMaker() {\n  _s();\n  const [pot, setPot] = useState();\n  const [label, setLabel] = useState();\n  const [data, setData] = useState();\n  useEffect(() => {\n    const fetchHistory = async () => {\n      const url = `http://localhost:3002/api/getData/NowData/usd/dkk`;\n      console.log(url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      var oldData = await response.json();\n      console.log(oldData);\n      var hist = await oldData.data;\n      hist = await JSON.parse(hist);\n      console.log(\"FINAL DATA : \" + hist);\n      if (Array.isArray(hist)) {\n        console.log(\"YAY!\");\n      } else {\n        console.log(\"NO :(\");\n      }\n      var labels = [];\n      var newData = [];\n      for (var i = 0; i < hist.length; i++) {\n        labels.push(i);\n        newData.push(hist[i].price);\n        console.log(\"ENTRY : \" + i);\n        console.log(\"DATA : \" + hist[i].price);\n      }\n      console.log(labels);\n      console.log(newData);\n      await setLabel(labels);\n      await setData(newData);\n      console.log(\"test:\" + labels + \" \" + newData);\n    };\n    fetchHistory();\n    setChartData({\n      labels: label,\n      datasets: [{\n        label: 'My First dataset',\n        backgroundColor: 'rgba(255,99,132,0.2)',\n        borderColor: 'rgba(255,99,132,1)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n        data: data\n      }]\n    });\n  }, [pot]);\n  const [chartData, setChartData] = useState({\n    labels: label,\n    datasets: [{\n      label: 'My First dataset',\n      backgroundColor: 'rgba(30, 30, 30, 0.7)',\n      borderColor: 'rgba(255,99,132,1)',\n      borderWidth: 1,\n      hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n      hoverBorderColor: 'rgba(255,99,132,1)',\n      data: data\n    }]\n  });\n  const [chartOptions, setChartOptions] = useState({\n    responsive: false,\n    maintainAspectRatio: false\n  });\n  /*\r\n  const [count, setCount] = useState(0);\r\n    useEffect(() => {\r\n      async function getData(data, cur1, cur2){\r\n            var url = 'http://localhost:3002/api/getData/' + data + '/' + cur1 + '/' + cur2;\r\n          console.log(url);\r\n          const entryData = fetch(url);\r\n          const entries = entryData.length;\r\n      \r\n          var arr = [];\r\n          for(var i = 0; i < entries; i++){\r\n              arr.push(i);\r\n          }\r\n      \r\n          var priceData = [];\r\n          for(var i = 0; i < entryData.length; i++){\r\n              priceData.push(entryData.catch(i).price);\r\n          }\r\n          const dataChart = document.getElementById(\"testGraph\");\r\n          let lineChart = new Chart(dataChart, {\r\n              type : 'line',\r\n              labels : {\r\n                  arr,\r\n                  data: priceData\r\n              },\r\n          });\r\n      }\r\n        getData(\"Day\", \"USD\", \"DKK\");\r\n  }, [count]);\r\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chartContainer\",\n    children: /*#__PURE__*/_jsxDEV(NewChart, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n_s(ChartMaker, \"M9ccjuod5ENT0p4CJ4382o5K9+0=\");\n_c = ChartMaker;\nvar _c;\n$RefreshReg$(_c, \"ChartMaker\");","map":{"version":3,"names":["NewChart","fetchData","React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChartMaker","_s","pot","setPot","label","setLabel","data","setData","fetchHistory","url","console","log","response","fetch","ok","Error","oldData","json","hist","JSON","parse","Array","isArray","labels","newData","i","length","push","price","setChartData","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","chartData","chartOptions","setChartOptions","responsive","maintainAspectRatio","id","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rayaa/ReactProjects/forexpress/forexpressFE/Home/src/ChartMaker.js"],"sourcesContent":["import NewChart from './NewChart.js';\r\nimport fetchData from './App.js';\r\nimport React from 'react';\r\nimport './ChartMaker.css'\r\nimport {useState, useEffect, useRef} from 'react';\r\n\r\nexport default function ChartMaker(){\r\n    const [pot, setPot] = useState();\r\n    const [label, setLabel] = useState();\r\n    const [data, setData] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchHistory = async () => {\r\n            const url = `http://localhost:3002/api/getData/NowData/usd/dkk`;\r\n            console.log(url);\r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n              throw new Error('Network response was not ok');\r\n            }\r\n            var oldData = await response.json();\r\n            console.log(oldData);\r\n            var hist = await oldData.data;\r\n            hist = await JSON.parse(hist);\r\n            console.log(\"FINAL DATA : \" + hist);\r\n            if(Array.isArray(hist)){\r\n              console.log(\"YAY!\");\r\n            }\r\n            else{\r\n              console.log(\"NO :(\");\r\n            }\r\n            var labels = [];\r\n            var newData = [];\r\n            for(var i = 0; i < hist.length; i++){\r\n                labels.push(i);\r\n                newData.push(hist[i].price);\r\n                console.log(\"ENTRY : \" + i);\r\n                console.log(\"DATA : \" + hist[i].price)\r\n            }\r\n            console.log(labels);\r\n            console.log(newData);\r\n            await setLabel(labels);\r\n            await setData(newData);\r\n            console.log(\"test:\" + labels + \" \" + newData);\r\n          };\r\n      \r\n          fetchHistory();\r\n          setChartData({\r\n            labels: label,\r\n            datasets: [\r\n              {\r\n                label: 'My First dataset',\r\n                backgroundColor: 'rgba(255,99,132,0.2)',\r\n                borderColor: 'rgba(255,99,132,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                hoverBorderColor: 'rgba(255,99,132,1)',\r\n                data: data,\r\n              },\r\n            ],\r\n          });\r\n\r\n    }, [pot]);\r\n\r\n    const [chartData, setChartData] = useState({\r\n        labels: label,\r\n        datasets: [\r\n          {\r\n            label: 'My First dataset',\r\n            backgroundColor: 'rgba(30, 30, 30, 0.7)',\r\n            borderColor: 'rgba(255,99,132,1)',\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n            hoverBorderColor: 'rgba(255,99,132,1)',\r\n            data: data,\r\n          },\r\n        ],\r\n      });\r\n    \r\n      const [chartOptions, setChartOptions] = useState({\r\n        responsive: false,\r\n        maintainAspectRatio: false,\r\n      });\r\n    /*\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        async function getData(data, cur1, cur2){\r\n\r\n            var url = 'http://localhost:3002/api/getData/' + data + '/' + cur1 + '/' + cur2;\r\n            console.log(url);\r\n            const entryData = fetch(url);\r\n            const entries = entryData.length;\r\n        \r\n            var arr = [];\r\n            for(var i = 0; i < entries; i++){\r\n                arr.push(i);\r\n            }\r\n        \r\n            var priceData = [];\r\n            for(var i = 0; i < entryData.length; i++){\r\n                priceData.push(entryData.catch(i).price);\r\n            }\r\n            const dataChart = document.getElementById(\"testGraph\");\r\n            let lineChart = new Chart(dataChart, {\r\n                type : 'line',\r\n                labels : {\r\n                    arr,\r\n                    data: priceData\r\n                },\r\n            });\r\n        }\r\n\r\n        getData(\"Day\", \"USD\", \"DKK\");\r\n    }, [count]);\r\n    */\r\n    return (\r\n        <div id=\"chartContainer\">\r\n            <NewChart data={chartData} options={chartOptions} />\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}